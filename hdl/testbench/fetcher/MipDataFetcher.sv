// Generated by CIRCT firtool-1.62.0
// external module mip_dispatch_fifo

module MipDataFetcher(
  input          clock,
                 reset,
                 io_ctrl_start_valid,
  output         io_ctrl_start_ready,
  output [31:0]  io_ctrl_dispatch_cnt,
  output         io_ctrl_dispatch_end,
  output [31:0]  io_ctrl_cmd_send_cnt,
                 io_ctrl_fetch_cnt,
                 io_ctrl_cmd_send_state,
                 io_ctrl_stream_state,
  output [95:0]  io_m_axis_mm2s_cmd_tdata,
  output         io_m_axis_mm2s_cmd_tvalid,
  input          io_m_axis_mm2s_cmd_tready,
  input  [127:0] io_s_axis_mm2s_tdata,
  input  [15:0]  io_s_axis_mm2s_tkeep,
  input          io_s_axis_mm2s_tlast,
                 io_s_axis_mm2s_tvalid,
  output         io_s_axis_mm2s_tready,
  input          io_mip_channels_0_need_data,
  output         io_mip_channels_0_voxel_addr_reg_wren,
  output [19:0]  io_mip_channels_0_voxel_addr_reg_wrdata,
  output         io_mip_channels_0_proc_queue_wren,
  output [255:0] io_mip_channels_0_proc_queue_wrdata,
  input          io_mip_channels_1_need_data,
  output         io_mip_channels_1_voxel_addr_reg_wren,
  output [19:0]  io_mip_channels_1_voxel_addr_reg_wrdata,
  output         io_mip_channels_1_proc_queue_wren,
  output [255:0] io_mip_channels_1_proc_queue_wrdata,
  input          io_mip_channels_2_need_data,
  output         io_mip_channels_2_voxel_addr_reg_wren,
  output [19:0]  io_mip_channels_2_voxel_addr_reg_wrdata,
  output         io_mip_channels_2_proc_queue_wren,
  output [255:0] io_mip_channels_2_proc_queue_wrdata,
  input          io_mip_channels_3_need_data,
  output         io_mip_channels_3_voxel_addr_reg_wren,
  output [19:0]  io_mip_channels_3_voxel_addr_reg_wrdata,
  output         io_mip_channels_3_proc_queue_wren,
  output [255:0] io_mip_channels_3_proc_queue_wrdata
);

  wire [255:0] _dispatch_fifo_dout;
  wire         _dispatch_fifo_valid;
  wire [9:0]   _dispatch_fifo_rd_data_count;
  reg  [48:0]  stream_cmd_start_addr;
  reg  [31:0]  cmd_send_cnt;
  reg  [31:0]  total_stream_recv_cnt;
  reg  [1:0]   datafetch_state;
  wire         io_s_axis_mm2s_tready_0 = datafetch_state == 2'h2;
  wire [31:0]  io_ctrl_stream_state_0 = {30'h0, datafetch_state};
  wire         io_m_axis_mm2s_cmd_tvalid_0 = datafetch_state == 2'h1;
  reg  [2:0]   dispatch_state;
  reg  [6:0]   dispatch_count;
  reg  [1:0]   dispatch_channel;
  reg  [26:0]  voxel_addr;
  reg  [31:0]  total_dispatched;
  wire         _dispatch_count_T = dispatch_state == 3'h2;
  wire         _io_mip_channels_3_voxel_addr_reg_wren_T = dispatch_state == 3'h1;
  wire         _io_mip_channels_0_proc_queue_wren_T = dispatch_channel == 2'h0;
  wire         _io_mip_channels_1_proc_queue_wren_T = dispatch_channel == 2'h1;
  wire         _io_mip_channels_2_proc_queue_wren_T = dispatch_channel == 2'h2;
  always @(posedge clock) begin
    if (reset) begin
      stream_cmd_start_addr <= 49'h878000000;
      cmd_send_cnt <= 32'h0;
      total_stream_recv_cnt <= 32'h0;
      datafetch_state <= 2'h0;
      dispatch_state <= 3'h0;
      dispatch_count <= 7'h0;
      dispatch_channel <= 2'h0;
      voxel_addr <= 27'h0;
      total_dispatched <= 32'h0;
    end
    else begin
      automatic logic _GEN;
      automatic logic _GEN_0;
      automatic logic _GEN_1;
      _GEN =
        (io_mip_channels_0_need_data | io_mip_channels_1_need_data
         | io_mip_channels_2_need_data | io_mip_channels_3_need_data)
        & (|(_dispatch_fifo_rd_data_count[9:7]));
      _GEN_0 = dispatch_state == 3'h1;
      _GEN_1 = dispatch_state == 3'h2;
      if (|datafetch_state) begin
        automatic logic _GEN_2 = datafetch_state == 2'h1;
        automatic logic _GEN_3;
        automatic logic _GEN_4;
        _GEN_3 = io_m_axis_mm2s_cmd_tvalid_0 & io_m_axis_mm2s_cmd_tready;
        _GEN_4 = datafetch_state == 2'h2;
        if (_GEN_2 & _GEN_3) begin
          stream_cmd_start_addr <= stream_cmd_start_addr + 49'h2000;
          cmd_send_cnt <= cmd_send_cnt + 32'h1;
        end
        if (_GEN_2 | ~(_GEN_4 & io_s_axis_mm2s_tvalid & io_s_axis_mm2s_tready_0)) begin
        end
        else
          total_stream_recv_cnt <= total_stream_recv_cnt + 32'h1;
        if (_GEN_2) begin
          if (_GEN_3)
            datafetch_state <= 2'h2;
        end
        else if (_GEN_4) begin
          if (io_s_axis_mm2s_tlast & io_s_axis_mm2s_tvalid & io_s_axis_mm2s_tready_0)
            datafetch_state <= cmd_send_cnt == 32'h4000 ? 2'h0 : 2'h3;
        end
        else if ((&datafetch_state) & ~(_dispatch_fifo_rd_data_count[9]))
          datafetch_state <= 2'h1;
      end
      else begin
        stream_cmd_start_addr <= 49'h878000000;
        cmd_send_cnt <= 32'h0;
        total_stream_recv_cnt <= 32'h0;
        if (io_ctrl_start_valid)
          datafetch_state <= 2'h1;
      end
      if (|dispatch_state) begin
        automatic logic _GEN_5;
        _GEN_5 = dispatch_state == 3'h3 & _GEN;
        if (_GEN_0)
          dispatch_state <= 3'h2;
        else if (_GEN_1) begin
          if (&dispatch_count)
            dispatch_state <= {1'h0, total_dispatched == 32'h3FFFFF ? 2'h0 : 2'h3};
        end
        else if (_GEN_5)
          dispatch_state <= 3'h1;
        if (_GEN_0 | _GEN_1 | ~_GEN_5) begin
        end
        else begin
          dispatch_channel <=
            io_mip_channels_0_need_data
              ? 2'h0
              : io_mip_channels_1_need_data ? 2'h1 : {1'h1, ~io_mip_channels_2_need_data};
          total_dispatched <= total_dispatched + 32'h1;
        end
      end
      else begin
        if (_GEN) begin
          dispatch_state <= 3'h1;
          dispatch_channel <=
            io_mip_channels_0_need_data
              ? 2'h0
              : io_mip_channels_1_need_data ? 2'h1 : {1'h1, ~io_mip_channels_2_need_data};
        end
        total_dispatched <= 32'h0;
      end
      if (_dispatch_count_T)
        dispatch_count <= dispatch_count + 7'h1;
      else
        dispatch_count <= 7'h0;
      if (~(|dispatch_state) | _GEN_0 | ~(_GEN_1 & (&dispatch_count))) begin
      end
      else
        voxel_addr <= voxel_addr + 27'h1000;
    end
  end // always @(posedge)
  mip_dispatch_fifo dispatch_fifo (
    .clk           (clock),
    .srst          (reset),
    .wr_en         (io_s_axis_mm2s_tvalid & io_s_axis_mm2s_tready_0),
    .din           (io_s_axis_mm2s_tdata),
    .full          (/* unused */),
    .rd_en         (_dispatch_count_T),
    .dout          (_dispatch_fifo_dout),
    .empty         (/* unused */),
    .valid         (_dispatch_fifo_valid),
    .wr_data_count (/* unused */),
    .rd_data_count (_dispatch_fifo_rd_data_count),
    .wr_rst_busy   (/* unused */),
    .rd_rst_busy   (/* unused */)
  );
  assign io_ctrl_start_ready = ~(|datafetch_state);
  assign io_ctrl_dispatch_cnt = total_dispatched;
  assign io_ctrl_dispatch_end = ~(|dispatch_state);
  assign io_ctrl_cmd_send_cnt = cmd_send_cnt;
  assign io_ctrl_fetch_cnt = total_stream_recv_cnt;
  assign io_ctrl_cmd_send_state = io_ctrl_stream_state_0;
  assign io_ctrl_stream_state = io_ctrl_stream_state_0;
  assign io_m_axis_mm2s_cmd_tdata = {15'h0, stream_cmd_start_addr, 32'h40802000};
  assign io_m_axis_mm2s_cmd_tvalid = io_m_axis_mm2s_cmd_tvalid_0;
  assign io_s_axis_mm2s_tready = io_s_axis_mm2s_tready_0;
  assign io_mip_channels_0_voxel_addr_reg_wren =
    _io_mip_channels_3_voxel_addr_reg_wren_T & _io_mip_channels_0_proc_queue_wren_T;
  assign io_mip_channels_0_voxel_addr_reg_wrdata = voxel_addr[19:0];
  assign io_mip_channels_0_proc_queue_wren =
    _dispatch_fifo_valid & _io_mip_channels_0_proc_queue_wren_T;
  assign io_mip_channels_0_proc_queue_wrdata = _dispatch_fifo_dout;
  assign io_mip_channels_1_voxel_addr_reg_wren =
    _io_mip_channels_3_voxel_addr_reg_wren_T & _io_mip_channels_1_proc_queue_wren_T;
  assign io_mip_channels_1_voxel_addr_reg_wrdata = voxel_addr[19:0];
  assign io_mip_channels_1_proc_queue_wren =
    _dispatch_fifo_valid & _io_mip_channels_1_proc_queue_wren_T;
  assign io_mip_channels_1_proc_queue_wrdata = _dispatch_fifo_dout;
  assign io_mip_channels_2_voxel_addr_reg_wren =
    _io_mip_channels_3_voxel_addr_reg_wren_T & _io_mip_channels_2_proc_queue_wren_T;
  assign io_mip_channels_2_voxel_addr_reg_wrdata = voxel_addr[19:0];
  assign io_mip_channels_2_proc_queue_wren =
    _dispatch_fifo_valid & _io_mip_channels_2_proc_queue_wren_T;
  assign io_mip_channels_2_proc_queue_wrdata = _dispatch_fifo_dout;
  assign io_mip_channels_3_voxel_addr_reg_wren =
    _io_mip_channels_3_voxel_addr_reg_wren_T & (&dispatch_channel);
  assign io_mip_channels_3_voxel_addr_reg_wrdata = voxel_addr[19:0];
  assign io_mip_channels_3_proc_queue_wren = _dispatch_fifo_valid & (&dispatch_channel);
  assign io_mip_channels_3_proc_queue_wrdata = _dispatch_fifo_dout;
endmodule

